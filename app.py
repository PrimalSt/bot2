import os
from aiogram import Bot, Dispatcher, types
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from aiogram.client.default import DefaultBotProperties
import logging
import sqlite3
from database import init_db, add_user, get_balance, update_balance
import random
from aiogram.types import Update
import datetime
import json

if __name__ == "__main__":
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "casino_bot.db"
# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Get token from environment variable with error handling
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# Initialize bot and dispatcher with error handling
try:
      bot = Bot(token=TOKEN, session=AiohttpSession())
      dp = Dispatcher(bot=bot, storage=MemoryStorage())
except Exception as e:
      logger.error(f"Failed to initialize bot: {e}")
      raise

casino_web_app = WebAppInfo(url="https://bot2-ksjg.onrender.com")
web_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ö–∞–∑–∏–Ω–æ", web_app=casino_web_app)]
    ]
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    add_user(telegram_id=message.from_user.id, username=message.from_user.username)
    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=(
                "Welcome to Casino Bot! üé∞\n\n"
                "–í–∞—à —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 1000."
            ),
            reply_markup=web_button
        )
    except TelegramAPIError as e:
        logger.error(f"Error in start_handler: {e}")
        await bot.send_message(chat_id=message.chat.id, text="Sorry, an error occurred. Please try again later.")

@dp.message(Command("balance"))
async def balance_handler(message: types.Message):
    balance = get_balance(telegram_id=message.from_user.id)
    if balance is not None:
        await bot.send_message(
            chat_id=message.chat.id,
            text=f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}"
        )
    else:
        await bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
 
@dp.message(Command("add_balance"))
async def add_balance_handler(message: types.Message):
    update_balance(telegram_id=message.from_user.id, amount=500)
    new_balance = get_balance(telegram_id=message.from_user.id)
    await bot.send_message(
        chat_id=message.chat.id,
        text=f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
    )

# Setting up aiohttp application
app = web.Application()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram

async def handle_webhook(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        json_data = await request.json()
        update = Update(**json_data)

        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        await dp.feed_update(bot=bot, update=update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"Error in webhook handler: {e}")
        return web.Response(status=500)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤–µ–±—Ö—É–∫–∞

app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/webhook", handle_webhook)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(app: web.Application):
    try:
        webhook_url = "https://bot2-ksjg.onrender.com/webhook"
        await bot.set_webhook(webhook_url)
        logger.info("Webhook set successfully LOL")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_shutdown(app: web.Application):
    try:
        await bot.session.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
        logger.info("Webhook and Session deleted successfully")
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ "/"
async def main_page(request):
    return web.FileResponse("./templates/index.html")

async def shop_page(request):
    return web.FileResponse("./templates/shop.html")

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_static("/static/", "./static")

async def shop_handler(request):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
        cursor.execute("SELECT id, name, price, description FROM shop_items")
        items = cursor.fetchall()
        conn.close()

        return web.json_response({"items": [{"id": row[0], "name": row[1], "price": row[2], "description": row[3]} for row in items]})
    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

app.router.add_post("/shop", shop_handler)
app.router.add_get("/shop", shop_handler)

async def buy_item_handler(request):
    try:
        data = await request.json()
        telegram_id = data.get("telegram_id")
        item_id = data.get("item_id")

        if not telegram_id or not item_id:
            return web.json_response({"error": "telegram_id and item_id are required"}, status=400)

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        cursor.execute("SELECT price FROM shop_items WHERE id = ?", (item_id,))
        item = cursor.fetchone()
        if not item:
            conn.close()
            return web.json_response({"error": "Item not found"}, status=404)

        price = item[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
        result = cursor.fetchone()
        if not result or result[0] < price:
            conn.close()
            return web.json_response({"error": "Insufficient balance"}, status=400)

        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
        cursor.execute("UPDATE users SET balance = balance - ? WHERE telegram_id = ?", (price, telegram_id))
        conn.commit()
        conn.close()

        return web.json_response({"status": "success", "message": "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!"})
    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)
    
app.router.add_post("/api/shop/buy", buy_item_handler)
app.router.add_get("/api/shop/buy", buy_item_handler)

async def daily_bonus_handler(request):
    try:
        data = await request.json()
        telegram_id = data.get("telegram_id")

        if not telegram_id:
            return web.json_response({"error": "telegram_id is required"}, status=400)

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—ã–¥–∞—á—É –±–æ–Ω—É—Å–∞
        cursor.execute("SELECT last_bonus FROM users WHERE telegram_id = ?", (telegram_id,))
        result = cursor.fetchone()
        if not result:
            conn.close()
            return web.json_response({"error": "User not found"}, status=404)

        last_bonus = result[0]
        today = datetime.date.today()
       
        if last_bonus == str(today):
            conn.close()
            return web.json_response({"error": "–í—ã —É–∂–µ –∑–∞–±–∏—Ä–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è"}, status=400)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–∞—Ç—É –±–æ–Ω—É—Å–∞
        cursor.execute("UPDATE users SET balance = balance + 100, last_bonus = ? WHERE telegram_id = ?", (today, telegram_id))
        cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
        new_balance = cursor.fetchone()[0]

        conn.commit()
        conn.close()

        return web.json_response({"new_balance": new_balance})

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

app.router.add_post("/api/daily_bonus", daily_bonus_handler) 
app.router.add_get("/api/daily_bonus", daily_bonus_handler) 

async def leaderboard_handler(request):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
        cursor.execute("SELECT username, balance FROM users ORDER BY balance DESC LIMIT 10")
        leaderboard = cursor.fetchall()
        conn.close()

        return web.json_response({"leaderboard": leaderboard})

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)
    
app.router.add_get("/api/leaderboard", leaderboard_handler)

# API: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def get_balance_handler(request):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON-–¥–∞–Ω–Ω—ã–µ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        telegram_id = data.get("telegram_id")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id –ø–µ—Ä–µ–¥–∞–Ω
        if not telegram_id:
            return web.json_response({"error": "telegram_id is required"}, status=400)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
        result = cursor.fetchone()
        conn.close()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if result:
            balance = result[0]
            return web.json_response({"balance": balance})
        else:
            return web.json_response({"error": "User not found"}, status=404)

    except sqlite3.Error as e:
        return web.json_response({"error": f"Database error: {str(e)}"}, status=500)

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

app.router.add_get("/api/balance", get_balance_handler)
app.router.add_post("/api/balance", get_balance_handler)

# API: –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
async def slots(request):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        telegram_id = data.get("telegram_id")
        bet = data.get("bet")

        if not telegram_id or not bet:
            return web.json_response({"error": "telegram_id and bet are required"}, status=400)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
        result = cursor.fetchone()
        if not result:
            conn.close()
            return web.json_response({"error": "User not found"}, status=404)

        balance = result[0]
        if balance < bet:
            conn.close()
            return web.json_response({"error": "Insufficient balance"}, status=400)

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
        cursor.execute("UPDATE users SET balance = balance - ? WHERE telegram_id = ?", (bet, telegram_id))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
        SYMBOLS = ["üçí", "üçã", "üîî", "‚≠ê", "üçâ", "üçá", "ü•ù"]
        reels = [[random.choice(SYMBOLS) for _ in range(5)] for _ in range(3)]  # 3 —Ä—è–¥–∞, 5 –±–∞—Ä–∞–±–∞–Ω–æ–≤
        win_amount = 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
        if all(reels[0][i] == reels[1][i] == reels[2][i] for i in range(5)):  # –ü–æ–ª–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
            win_amount = bet * 50
        elif any(reels[0][i] == reels[1][i] == reels[2][i] for i in range(5)):  # –õ–∏–Ω–∏—è –∏–∑ 3 —Å–∏–º–≤–æ–ª–æ–≤
            win_amount = bet * 10
        elif "‚≠ê" in reels[1]:  # –ó–≤–µ–∑–¥–∞ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
            win_amount = bet * 5

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute("UPDATE users SET balance = balance + ? WHERE telegram_id = ?", (win_amount, telegram_id))
        cursor.execute("SELECT balance FROM users WHERE telegram_id = ?", (telegram_id,))
        new_balance = cursor.fetchone()[0]
        conn.commit()
        conn.close()

        return web.json_response({
            "reels": reels,
            "win_amount": win_amount,
            "new_balance": new_balance
        })

    except sqlite3.Error as e:
        return web.json_response({"error": f"Database error: {str(e)}"}, status=500)

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

@web.middleware
async def cors_middleware(request, handler):
    response = await handler(request)
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
    response.headers["Access-Control-Allow-Headers"] = "Content-Type"
    return response

app.middlewares.append(cors_middleware)

app.router.add_post("/api/slots", slots)
app.router.add_get("/api/slots", slots)
app.router.add_post("/", main_page)
app.router.add_post("/shop", shop_page)
app.router.add_get("/", main_page)
app.router.add_get("/shop", shop_page)
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    try:
        port = int(os.getenv('PORT', 8080))
        web.run_app(
            app,
            host='0.0.0.0',
            port=port,
            access_log=logger
        )
    except Exception as e:
        logger.error(f"Failed to start application: {e}")