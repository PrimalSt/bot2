async function playSlots(telegramId, bet) {
  try {
    const response = await fetch("/api/slots", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        bet: bet,
      }),

    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã.");
    }
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Å–ª–æ—Ç—ã:", error);
    throw error;
  }
}


document.getElementById("spinButton").addEventListener("click", async () => {
  if (isSpinning) {
    showNotification(`–ò–≥—Ä–∞ –∏–¥–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è`, "success");
    return;
  }

  const betInput = document.getElementById("bet-amount");
  const bet = parseInt(betInput.value);
  const balanceElement = document.getElementById("balance");
  const telegramId = Telegram.WebApp.initDataUnsafe.user.id;

  if (!telegramId) {
    alert("–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    return;
  }

  if (!bet || bet <= 0) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.");
    return;
  }
  isSpinning = true;
  slotsButton.disabled = true;

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—Ä—É—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
  slotElements.forEach(slot => {
    slot.classList.add("spinning");
    slot.classList.remove("winning", "losing", "winning-star");
    // slot.textContent = "üçí"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
  });

  try {
    const result = await playSlots(telegramId, bet);
    setTimeout(() => {
      fetchBalance(telegramId).then((balance) => {
        document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
      });
    }, 2200);
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result.slots.forEach((symbol, index) => {
      setTimeout(() => {
        const slot = slotElements[index];
        slot.classList.remove("spinning");
        slot.textContent = symbol;
      }, index * 1000); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
      setTimeout(() => {
        const slot = slotElements[index]; // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ—Ç–∞
        if (symbol === result.slots[0] && result.slots.every(s => s === symbol)) {
          if (symbol === "‚≠ê") {
            slot.classList.add("winning-star"); // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø—ã—à–µ–∫ –¥–ª—è –∑–≤—ë–∑–¥–æ—á–µ–∫
          } else if (result.slots.every(s => s === symbol)) {
            createFireworks(); // –§–µ–π–µ—Ä–≤–µ—Ä–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
          }
          slot.classList.add("winning");
        } else {
          slot.classList.add("losing");
        }
      }, 2200);
    });

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
    setTimeout(() => {
      if (result.win_amount > 0) {
        showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.win_amount} –º–æ–Ω–µ—Ç!`, "success");
      } else {
        showNotification("–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", "error");
      }

      isSpinning = false;
      slotsButton.disabled = false;
    }, 2200);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ —Å–ª–æ—Ç—ã:", error);
    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

