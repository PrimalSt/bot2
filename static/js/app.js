// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
//Telegram.WebApp.ready();
const showNotification = (message, type = "info") => {
  const notification = document.createElement("div");
  notification.textContent = message;
  notification.className = `notification ${type}`;
  document.body.appendChild(notification);
  setTimeout(() => notification.remove(), 2200);
};
const symbolImages = {
  "üçí": "/static/images/cherry.png",
  "üçã": "/static/images/lemon.png",
  "üîî": "/static/images/daimond.png",
  "‚≠ê": "/static/images/seven.png",
  "üçâ": "/static/images/watermelon.png",
  "üçá": "/static/images/grape.png",
  "ü•ù": "/static/images/plum.png"
};


// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const spinButton = document.getElementById("spinButton");
const balanceElement = document.getElementById("balance");
const resultElement = document.getElementById("result");
const reelsContainer = document.getElementById("reels");

function updateReels(reels) {
  const reelContainers = document.querySelectorAll('.reel');
  reels.forEach((reel, index) => {
    reelContainers[index].innerHTML = reel
      .map(symbol => `<img src="${symbolImages[symbol]}" alt="${symbol}" class="symbol">`)
      .join('');
  });
}

async function fetchBalance() {
  try {
    const telegramId = Telegram.WebApp.initDataUnsafe?.user?.id;

    if (!telegramId) {
      throw new Error("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
    }

    const response = await fetch("/api/balance", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ telegram_id: telegramId }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
    }

    const data = await response.json();
    return data.balance;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: " + error.message);
    return null;
  }
}
async function updateBalanceDisplay() {
  const balanceElement = document.getElementById("balance");
  const balance = await fetchBalance();
  if (balance !== null) {
    balanceElement.textContent = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
  }
}
document.addEventListener("DOMContentLoaded", () => {

  const slotsButton = document.getElementById("spinButton");
  const slotElements = [
    document.getElementById("slot1"),
    document.getElementById("slot2"),
    document.getElementById("slot3")
  ];
  const resultText = document.getElementById("result");
  let isSpinning = false;
  if (!slotsButton) {
    console.error("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'slots' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM.");
  } else {
    console.log("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'slots' –Ω–∞–π–¥–µ–Ω.");
  }


  if (typeof Telegram !== "undefined" && Telegram.WebApp) {
    const tg = Telegram.WebApp;
    const initData = tg.initDataUnsafe;
    console.log("Init Data:", initData);

    if (initData.user) {
      const telegramId = initData.user.id;
      const firstName = initData.user.first_name || "–ì–æ—Å—Ç—å";

      document.getElementById("username").innerText = `–ü—Ä–∏–≤–µ—Ç, ${firstName}!`;
      document.getElementById("balance").innerText = "–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å...";

      fetchBalance(telegramId).then((balance) => {
        document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      // setInterval(() => {
      //   fetchBalance(telegramId).then((balance) => {
      //    document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
      //});
      //  }, 10000);

    } else {
      alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram.");
    }
  } else {
    alert("Telegram Web App API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
  }
});




document.getElementById("daily-bonus").addEventListener("click", async () => {
  const telegramId = Telegram.WebApp.initDataUnsafe.user.id;
  const bonusMessage = document.getElementById("bonus-message");

  try {
    const response = await fetch("/api/daily_bonus", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ telegram_id: telegramId }),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.");
    }

    showNotification(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 100 –º–æ–Ω–µ—Ç!`, "success");
    fetchBalance(telegramId).then((balance) => {
      document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
    })
  } catch (error) {
    showNotification(`–í—ã –ø–æ–ª—É—á–∞–ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–π –±–æ–Ω—É—Å`, "error");
  }
});

function createFireworks() {
  const container = document.getElementById("fireworks-container");

  for (let i = 0; i < 10; i++) {
    const firework = document.createElement("div");
    firework.classList.add("firework");

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ü–≤–µ—Ç–∞
    const randomX = Math.random() * 100 + "%";
    const randomY = Math.random() * 100 + "%";
    const colors = ["red", "blue", "green", "yellow", "purple"];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];

    firework.style.left = randomX;
    firework.style.top = randomY;
    firework.style.backgroundColor = randomColor;

    container.appendChild(firework);

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      firework.remove();
    }, 800);
  }
}

// –£–ª—É—á—à–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
async function fetchLeaderboard() {
  try {
    const response = await fetch("/api/leaderboard");
    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.");
    }

    const leaderboardElement = document.getElementById("leaderboard");
    leaderboardElement.innerHTML = '';

    const table = document.createElement('table');
    const headerRow = document.createElement('tr');

    ['–ú–µ—Å—Ç–æ', '–ò–≥—Ä–æ–∫', '–ë–∞–ª–∞–Ω—Å'].forEach(text => {
      const th = document.createElement('th');
      th.textContent = text;
      headerRow.appendChild(th);
    });

    table.appendChild(headerRow);

    result.leaderboard.forEach((player, index) => {
      const row = document.createElement('tr');
      [index + 1, player[0], player[1]].forEach(text => {
        const td = document.createElement('td');
        td.textContent = text;
        row.appendChild(td);
      });
      table.appendChild(row);
    });

    leaderboardElement.appendChild(table);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:", error);
    showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤", "error");
  }
}
// –í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
async function spinSlots() {
  const bet = parseInt(document.getElementById("bet").value);
  if (isNaN(bet) || bet <= 0) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.");
    return;
  }

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
  spinButton.disabled = true;

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
  startSpinning();

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch("/api/slots", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        telegram_id: Telegram.WebApp.initDataUnsafe.user.id,
        bet: bet,
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä—ã.");
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    setTimeout(() => {
      stopSpinning(data.reels);
      updateBalance(data.new_balance);
      showResult(data.win_amount);
      spinButton.disabled = false;
    }, 2000); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–ø–∏–Ω–æ–≤:", error);
    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    spinButton.disabled = false;
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
function startSpinning() {
  reelsContainer.innerHTML = "";

  for (let i = 0; i < 5; i++) {
    const reel = document.createElement("div");
    reel.className = "reel";

    // –î–æ–±–∞–≤–ª—è–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (let j = 0; j < 10; j++) {
      const img = document.createElement("img");
      img.src = getRandomSymbolImage();
      img.className = "symbol";
      reel.appendChild(img);
    }

    reelsContainer.appendChild(reel);

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å GSAP
    gsap.to(reel, {
      y: -1000, // –°–¥–≤–∏–≥ –≤–≤–µ—Ä—Ö (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤)
      duration: 1 + i * 0.2, // –†–∞–∑–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞
      ease: "power2.inOut",
      repeat: -1,
    });
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
function stopSpinning(reels) {
  const reelElements = Array.from(reelsContainer.children);

  reelElements.forEach((reelElement, index) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ reels —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
    if (!Array.isArray(reels) || !Array.isArray(reels[index])) {
      console.error(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞ ${index} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. reels:`, reels);
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é GSAP
    gsap.killTweensOf(reelElement);

    // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∏—Ç–æ–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    reelElement.innerHTML = reels[index]
      .map(symbol => {
        const decodedSymbol = String.fromCodePoint(symbol.codePointAt(0));
        return `<img src="${symbolImages[decodedSymbol]}" class="symbol">`;
      })
      .join("");
  });
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateBalance(newBalance) {
  balanceElement.textContent = `–ë–∞–ª–∞–Ω—Å: ${newBalance} –º–æ–Ω–µ—Ç`;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã
function showResult(winAmount) {
  if (winAmount > 0) {
    showNotification(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.win_amount} –º–æ–Ω–µ—Ç!`, "success");
  } else {
    showNotification("–£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", "error");
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
function getRandomSymbolImage() {
  const symbols = Object.keys(symbolImages);
  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
  return symbolImages[randomSymbol];
}

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ
spinButton.addEventListener("click", spinSlots);

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener("DOMContentLoaded", fetchLeaderboard);
