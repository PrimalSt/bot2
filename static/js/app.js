// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
//Telegram.WebApp.ready();
async function fetchBalance() {
  try {
    const telegramId = Telegram.WebApp.initDataUnsafe?.user?.id;

    if (!telegramId) {
      throw new Error("Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
    }

    const response = await fetch("/api/balance", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ telegram_id: telegramId }),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.");
    }

    const data = await response.json();
    return data.balance;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: " + error.message);
    return null;
  }
}
async function updateBalanceDisplay() {
  const balanceElement = document.getElementById("balance");
  const balance = await fetchBalance();
  if (balance !== null) {
    balanceElement.textContent = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
  }
}
document.addEventListener("DOMContentLoaded", () => {

  const slotsButton = document.getElementById("slots");
  const slotElements = [
    document.getElementById("slot1"),
    document.getElementById("slot2"),
    document.getElementById("slot3")
  ];
  const resultText = document.getElementById("result");
  let isSpinning = false;
  if (!slotsButton) {
    console.error("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'slots' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM.");
  } else {
    console.log("–≠–ª–µ–º–µ–Ω—Ç —Å ID 'slots' –Ω–∞–π–¥–µ–Ω.");
  }


  if (typeof Telegram !== "undefined" && Telegram.WebApp) {
    const tg = Telegram.WebApp;
    const initData = tg.initDataUnsafe;
    console.log("Init Data:", initData);

    if (initData.user) {
      const telegramId = initData.user.id;
      const firstName = initData.user.first_name || "–ì–æ—Å—Ç—å";

      document.getElementById("username").innerText = `–ü—Ä–∏–≤–µ—Ç, ${firstName}!`;
      document.getElementById("balance").innerText = "–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å...";

      fetchBalance(telegramId).then((balance) => {
        document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
      setInterval(() => {
        fetchBalance(telegramId).then((balance) => {
          document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
        });
      }, 10000);

    } else {
      alert("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram.");
    }
  } else {
    alert("Telegram Web App API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.");
  }

  document.getElementById("slots").addEventListener("click", async () => {

    if (isSpinning) {
      alert("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã.");
      return;
    }

    const betInput = document.getElementById("bet-amount");
    const bet = parseInt(betInput.value);
    const balanceElement = document.getElementById("balance");
    const telegramId = Telegram.WebApp.initDataUnsafe.user.id;

    if (!telegramId) {
      alert("–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    if (!bet || bet <= 0) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É.");
      return;
    }
    isSpinning = true;
    slotsButton.disabled = true;

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—Ä—É—Ç–∫–∏ —Å–ª–æ—Ç–æ–≤
    slotElements.forEach(slot => {
      slot.classList.add("spinning");
      slot.classList.remove("winning", "losing");
      // slot.textContent = "üçí"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
    });

    try {
      const result = await playSlots(telegramId, bet);
      setTimeout(() => {
        fetchBalance(telegramId).then((balance) => {
          document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
        });
      }, 2200);
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–ª–æ—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      result.slots.forEach((symbol, index) => {
        setTimeout(() => {
          const slot = slotElements[index];
          slot.classList.remove("spinning");
          slot.textContent = symbol;
        }, index * 1000); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
        setTimeout(() => {
          const slot = slotElements[index]; // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ—Ç–∞
          if (symbol === result.slots[0] && result.slots.every(s => s === symbol)) {
            slot.classList.add("winning");
          } else {
            slot.classList.add("losing");
          }
        }, 2200);
      });

      // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
      setTimeout(() => {
        resultText.textContent = result.win_amount > 0
          ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.win_amount} –º–æ–Ω–µ—Ç! üéâ`
          : "–£–≤—ã, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!";
        resultText.style.color = result.win_amount > 0 ? "green" : "red";

        isSpinning = false;
        slotsButton.disabled = false;
      }, 2200);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ —Å–ª–æ—Ç—ã:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });
});



async function playSlots(telegramId, bet) {
  try {
    const response = await fetch("/api/slots", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        bet: bet,
      }),
    });
    const data = await response.json();
    if (!response.ok) {
      throw new Error(data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã.");
    }
    return data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥—Ä–µ –≤ —Å–ª–æ—Ç—ã:", error);
    throw error;
  }
}

document.getElementById("daily-bonus").addEventListener("click", async () => {
  const telegramId = Telegram.WebApp.initDataUnsafe.user.id;
  const bonusMessage = document.getElementById("bonus-message");

  try {
    const response = await fetch("/api/daily_bonus", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ telegram_id: telegramId }),
    });

    const result = await response.json();
    if (!response.ok) {
      throw new Error(result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.");
    }

    bonusMessage.textContent = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω!";
    bonusMessage.style.color = "green";
    fetchBalance(telegramId).then((balance) => {
      document.getElementById("balance").innerText = `–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
    })
  } catch (error) {
    bonusMessage.textContent = error.message;
    bonusMessage.style.color = "red";
  }
});

async function fetchLeaderboard() {
  try {
    const response = await fetch("/api/leaderboard");
    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤.");
    }

    const leaderboardElement = document.getElementById("leaderboard");
    leaderboardElement.innerHTML = result.leaderboard
      .map((player) => `<li>${player[0]}: ${player[1]} –º–æ–Ω–µ—Ç</li>`)
      .join("");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:", error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener("DOMContentLoaded", fetchLeaderboard);